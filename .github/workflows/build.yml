name: 'Build CraftBeerPi4'

on:
  push:
    branches:
      - main
      - master
      - development
  pull_request:

env:
  image-name: ghcr.io/${{ github.repository_owner }}/craftbeerpi4

jobs:
  build:
    runs-on: ubuntu-latest
    name: Builds the source distribution package
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Clean
        run: python setup.py clean --all

#      - name: Run tests
#        run: python -m unittest tests

      - name: Build source distribution package for CraftBeerPi
        run: python setup.py sdist

      - name: Upload CraftBeerPi package to be used in next step
        uses: actions/upload-artifact@v2.2.4
        with:
          name: craftbeerpi4
          path: dist/cbpi-*.tar.gz
          if-no-files-found: error

  docker:
    runs-on: ubuntu-latest
    name: Builds the docker image(s)
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare docker image and tag names
        id: prep
        run: |

          PUBLISH_IMAGE=false
          TAGS="${{ env.image-name }}:dev"

          if [[ $GITHUB_REF_NAME == master ]] || [[ $GITHUB_REF_NAME == main ]]; then
            # when building master/main use :latest tag and the version number
            # from the cbpi/__init__.py file
            VERSION=$(grep -o -E "(([0-9]{1,2}[.]?){3}[0-9]+)" cbpi/__init__.py)
            TAGS="${{ env.image-name }}:latest,${{ env.image-name }}:v${VERSION}"
            PUBLISH_IMAGE=true
          elif [[ $GITHUB_REF_NAME == development ]]; then
            PUBLISH_IMAGE=true
          fi

          # Set output parameters.
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=publish_image::${PUBLISH_IMAGE}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ steps.prep.outputs.publish_image }}
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}
